---
import BaseLayout from '../layouts/BaseLayout.astro'

import ProjectCardLeft from '../components/ProjectCardLeft.astro'
import ProjectCardRight from '../components/ProjectCardRight.astro'

import ProjectTile from '../components/ProjectTile.astro'
const allProjectCards = await Astro.glob('./project_cards/*.md*')
const allProjectTiles = await Astro.glob('./project_tiles/*.md*')
const pageTitle = 'Some of my projects'

let i = 0
---

<BaseLayout pageTitle={pageTitle}>
    <h1>Some of my projects</h1>
    <div class="container">
        <div class="project-cards">
            <ul>
                {
                    allProjectCards.map((post) =>
                        i++ % 2 === 0 ? (
                            <ProjectCardLeft
                                title={post.frontmatter.title}
                                image={post.frontmatter.image}
                                description={post.frontmatter.description}
                                link={post.frontmatter.link}
                            />
                        ) : (
                            <ProjectCardRight
                                title={post.frontmatter.title}
                                image={post.frontmatter.image}
                                description={post.frontmatter.description}
                                link={post.frontmatter.link}
                            />
                        )
                    )
                }
            </ul>
        </div>
    </div>
    <div class="container">
        <ul role="list" class="project-tiles">
            {
                allProjectTiles.map((post) => (
                    <ProjectTile
                        title={post.frontmatter.title}
                        description={post.frontmatter.description}
                        link={post.frontmatter.link}
                    />
                ))
            }
        </ul>
        <div class="boxes">
            <a href="https://github.com/RomainPierre7" target="_blanck">
                <div class="box">
                    More projects on my GitHub profile <span id="project-count"></span>
                </div>
            </a>
        </div>
    </div>
    <div class="spacer"></div>
</BaseLayout>

<script>
    document.addEventListener('DOMContentLoaded', async () => {
        const projectCountElement = document.getElementById('project-count')

        if (projectCountElement) {
            try {
                const response = await fetch('https://api.github.com/users/romainpierre7')
                const data = await response.json()
                const numberOfProjects = data.public_repos
                projectCountElement.textContent = `(${numberOfProjects} projects)`
            } catch (error) {
                console.log('Public projects: Error fetching projects')
            }
        }
    })
</script>

<script>
    interface Asset {
        download_count: number
    }

    interface Release {
        assets: Asset[]
    }

    document.addEventListener('DOMContentLoaded', async () => {
        const releases: Release[] = await fetch(
            'https://api.github.com/repos/romainpierre7/jellyfin-plugin-telegramnotifier/releases'
        ).then((response) => response.json())

        const downloadCounts = releases
            .map((release) => release.assets.map((asset) => asset.download_count))
            .flat()

        const maxDownloadCount = Math.max(...downloadCounts)

        const projectCardInfoElements = document.querySelectorAll('.project-card_info')

        let targetElement = null

        projectCardInfoElements.forEach((proj) => {
            const header = proj.querySelector('.project-card_header')
            if (header) {
                const title = header.querySelector('h2')
                if (title && title.textContent) {
                    if (title.textContent.trim() === 'Telegram Notifier') {
                        title.textContent = title.textContent + ` (${maxDownloadCount} users)`
                        /* targetElement = proj.querySelector('p')
                        if (targetElement) {
                            targetElement.textContent =
                                targetElement.textContent + ` Downloaded ${maxDownloadCount} times`
                        } */
                    }
                }
            }
        })
    })
</script>

<style>
    .container {
        width: 80%;
        max-width: fit-content;
        margin: auto auto;
        justify-content: center;
        align-items: center;
        text-align: center;
        margin-top: 1rem;
    }

    ul {
        list-style: none;
        margin: 0, auto;
        padding: 0;
    }

    h1 {
        text-align: center;
    }

    .project-cards {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
    }

    .project-cards {
        list-style: none;
        margin: 0, auto;
        padding: 0;
    }

    .project-tiles {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        grid-gap: 1rem;
        list-style: none;
    }

    .box {
        border: #64ffda 2px solid;
        display: inline-block;
        text-align: center;
        padding: 15px 20px;
        font-size: 1.2rem;
        font-weight: bold;
        text-transform: uppercase;
        position: relative;
        margin: 1rem 2rem;
    }

    .boxes {
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .boxes a {
        color: #64ffda;
        display: inline-block;
        text-align: center;
        text-decoration: none;
        font-size: 1.2rem;
        font-weight: bold;
        text-transform: uppercase;
        position: relative;
    }

    .box:hover {
        transform: translateY(-2px);
    }

    .spacer {
        height: 2rem;
    }

    @media (max-width: 450px) {
        .project-tiles {
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        }
    }
</style>
